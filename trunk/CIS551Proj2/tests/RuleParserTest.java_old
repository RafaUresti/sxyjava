package ruleParser;

import static org.junit.Assert.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;

import org.junit.Before;
import org.junit.Test;

public class RuleParserTest {
	RuleParser rp1, rp2, rp3, rp4, rp5, rp6, rp7, rp8;
	File f1, f2, f3, f4, f5, f6, f7, f8;
	String r1, r2, r3, r4, r5, r6, r7, r8;

	@Before
	public void setUp(){
		r1 = "host=192.168.0.1\r\n" + 
		"\r\n" + 
		"name=Blame Attack 1\r\n" + 
		"type=protocol\r\n" + 
		"proto=tcp\r\n" + 
		"host_port=5551\r\n" + 
		"attacker_port=any\r\n" + 
		"attacker=any\r\n" + 
		"to_host=\"Now I own your computer\"\r\n";

		r2 = "host=192.168.0.1\r\n" + 
		"\r\n" + 
		"name=Blame Attack 2\r\n" + 
		"type=tcp_stream\r\n" + 
		"host_port=5551\r\n" + 
		"attacker_port=any\r\n" + 
		"attacker=any\r\n" + 
		"to_host=\"Now I own your computer\"\r\n";

		r3 = "host=192.168.0.1\r\n" + 
		"\r\n" + 
		"name=Blame Attack 3\r\n" + 
		"type=tcp_stream\r\n" + 
		"host_port=5551\r\n" + 
		"attacker_port=any\r\n" + 
		"attacker=any\r\n" + 
		"to_host=\"\\x90{10}.*\\xcd\\x80\"\r\n";

		r4 = "host=192.168.0.1\r\n" + 
		"\r\n" + 
		"name=Plaintext POP\r\n" + 
		"type=protocol\r\n" + 
		"proto=tcp\r\n" + 
		"host_port=110\r\n" + 
		"attacker_port=any\r\n" + 
		"attacker=any\r\n" + 
		"from_host=\"\\+OK.*\\r\\n\"\r\n" + 
		"to_host=\"USER .*\\r\\n\"\r\n" + 
		"from_host=\"\\+OK.*\\r\\n\"\r\n" + 
		"to_host=\"PASS.*\\r\\n\"\r\n" + 
		"from_host=\"\\+OK.*\\r\\n\"\r\n";

		r5 = "host=192.168.0.1\r\n" + 
		"\r\n" + 
		"name=XMAS scan\r\n" + 
		"type=protocol\r\n" + 
		"proto=tcp\r\n" + 
		"host_port=any\r\n" + 
		"attacker_port=any\r\n" + 
		"attacker=any\r\n" + 
		"to_host=\".*\" with flags=FUP\r\n";

		r6 = "host=192.168.0.1\r\n" + 
		"\r\n" + 
		"name=NULL scan\r\n" + 
		"type=protocol\r\n" + 
		"proto=tcp\r\n" + 
		"host_port=80\r\n" + 
		"attacker_port=any\r\n" + 
		"attacker=any\r\n" + 
		"to_host=\".*\" with flags=\r\n";

		r7 = "host=192.168.0.1\r\n" + 
		"\r\n" + 
		"name=TFTP attacker boot\r\n" + 
		"type=protocol\r\n" + 
		"proto=udp\r\n" + 
		"host_port=any\r\n" + 
		"attacker_port=69\r\n" + 
		"attacker=any\r\n" + 
		"from_host=\"vmlinuz\"\r\n" + 
		"to_host=\"\\x00\\x03\\x00\\x01\"\r\n";

		r8 = "host=192.168.0.1\r\n" + 
		"\r\n" + 
		"name=Blame Attack 1\r\n" + 
		"type=protocol\r\n" + 
		"proto=tcp\r\n" + 
		"host_port=5551\r\n" + 
		"attacker_port=any\r\n" + 
		"attacker=any\r\n" + 
		"to_host=\"Now I own your computer\"\r\n" + 
		"name=Blame Attack 2\r\n" + 
		"type=tcp_stream\r\n" + 
		"host_port=5551\r\n" + 
		"attacker_port=any\r\n" + 
		"attacker=any\r\n" + 
		"to_host=\"Now I own your computer\"\r\n" +
		"name=Blame Attack 3\r\n" + 
		"type=tcp_stream\r\n" + 
		"host_port=5551\r\n" + 
		"attacker_port=any\r\n" + 
		"attacker=any\r\n" + 
		"to_host=\"\\x90{10}.*\\xcd\\x80\"\r\n" +
		"name=Plaintext POP\r\n" + 
		"type=protocol\r\n" + 
		"proto=tcp\r\n" + 
		"host_port=110\r\n" + 
		"attacker_port=any\r\n" + 
		"attacker=any\r\n" + 
		"from_host=\"\\+OK.*\\r\\n\"\r\n" + 
		"to_host=\"USER .*\\r\\n\"\r\n" + 
		"from_host=\"\\+OK.*\\r\\n\"\r\n" + 
		"to_host=\"PASS.*\\r\\n\"\r\n" + 
		"from_host=\"\\+OK.*\\r\\n\"\r\n" +
		"name=XMAS scan\r\n" + 
		"type=protocol\r\n" + 
		"proto=tcp\r\n" + 
		"host_port=any\r\n" + 
		"attacker_port=any\r\n" + 
		"attacker=any\r\n" + 
		"to_host=\".*\" with flags=FUP\r\n" +
		"name=NULL scan\r\n" + 
		"type=protocol\r\n" + 
		"proto=tcp\r\n" + 
		"host_port=80\r\n" + 
		"attacker_port=any\r\n" + 
		"attacker=any\r\n" + 
		"to_host=\".*\" with flags=\r\n" +
		"name=TFTP attacker boot\r\n" + 
		"type=protocol\r\n" + 
		"proto=udp\r\n" + 
		"host_port=any\r\n" + 
		"attacker_port=69\r\n" + 
		"attacker=any\r\n" + 
		"from_host=\"vmlinuz\"\r\n" + 
		"to_host=\"\\x00\\x03\\x00\\x01\"\r\n";
		PrintWriter printWriter;
		for (int i = 1; i <= 8; i ++){
			try {
				printWriter = new PrintWriter(new FileOutputStream("r"+i), true);
				switch (i){
				case 1: printWriter.println(r1); break;
				case 2: printWriter.println(r2); break;
				case 3: printWriter.println(r3); break;
				case 4: printWriter.println(r4); break;
				case 5: printWriter.println(r5); break;
				case 6: printWriter.println(r6); break;
				case 7: printWriter.println(r7); break;
				case 8: printWriter.println(r8); break;
				}
				printWriter.flush( );
				printWriter.close();
				switch (i){
				case 1: f1 = new File("r1"); rp1 = new RuleParser(f1);break;
				case 2: f2 = new File("r2"); rp2 = new RuleParser(f2);break;
				case 3: f3 = new File("r3"); rp3 = new RuleParser(f3);break;
				case 4: f4 = new File("r4"); rp4 = new RuleParser(f4);break;
				case 5: f5 = new File("r5"); rp5 = new RuleParser(f5);break;
				case 6: f6 = new File("r6"); rp6 = new RuleParser(f6);break;
				case 7: f7 = new File("r7"); rp7 = new RuleParser(f7);break;
				case 8: f8 = new File("r8"); rp8 = new RuleParser(f8);break;
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}
	}


	@Test
	public void testSubRules(){
		ProtocolRule pr5 = (ProtocolRule)rp5.getRules().get(0);
		if (pr5 != null){
			boolean[] flags = new boolean[] {false, false, true, false, true, true};
			for (int i = 0; i < 6; i ++){
				assertEquals(pr5.getSubRules().get(0).getFlags()[i], flags[i]);
			}
		}
		ProtocolRule pr6 = (ProtocolRule)rp6.getRules().get(0);
		for (int i = 0; i < 6; i ++){
			assertEquals(pr6.getSubRules().get(0).getFlags()[i], false);
		}
		ProtocolRule pr7 = (ProtocolRule)rp7.getRules().get(0);
		assertEquals(pr7.getSubRules().get(0).getFlags(), null);
		assertEquals(pr7.getSubRules().get(0).getContent(), "vmlinuz");
		assertEquals(pr7.getSubRules().get(1).getContent(), "\\x00\\x03\\x00\\x01");
	}
}
