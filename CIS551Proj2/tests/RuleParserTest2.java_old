package ruleParser;

import static org.junit.Assert.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;

import org.junit.Before;
import org.junit.Test;

public class RuleParserTest2 {
	RuleParser rp1, rp2, rp3, rp4, rp5, rp6, rp7, rp8;
	File f1, f2, f3, f4, f5, f6, f7, f8;
	String r1, r2, r3, r4, r5, r6, r7, r8;

	@Before
	public void setUp(){
		r1 = "host=255.255.255.255\r\n" + 
				"\r\n" + 
				"name=test1\r\n" + 
				"type=protocol\r\n" + 
				"proto=tcp\r\n" + 
				"host_port=any\r\n" + 
				"attacker_port=any\r\n" + 
				"attacker=any\r\n" + 
				"to_host=\"Open it\"\r\n" + 
				"";

		r2 = "host=0.0.0.1\r\n" + 
				"\r\n" + 
				"name=test2\r\n" + 
				"type=protocol\r\n" + 
				"proto=tcp\r\n" + 
				"host_port=110\r\n" + 
				"attacker_port=any\r\n" + 
				"attacker=any\r\n" + 
				"to_host=\"CREDIT CARD NUM.*\\r\\n\"\r\n" + 
				"from_host=\"\\+OK.*\\r\\n\"\r\n" + 
				"to_host=\"VALID DATE.*\\r\\n\"\r\n" + 
				"from_host=\"\\+OK.*\\r\\n\"";

		r3 = "host=192.168.0.1\r\n" + 
				"\r\n" + 
				"name=test3\r\n" + 
				"type=protocol\r\n" + 
				"proto=udp\r\n" + 
				"host_port=any\r\n" + 
				"attacker_port=65535\r\n" + 
				"attacker=215.212.233.3\r\n" + 
				"to_host=\".*\"\r\n" + 
				"";

		r4 = "host=192.168.0.1\r\n" + 
				"\r\n" + 
				"name=test4\r\n" + 
				"type=protocol\r\n" + 
				"proto=udp\r\n" + 
				"host_port=any\r\n" + 
				"attacker_port=any\r\n" + 
				"attacker=any\r\n" + 
				"from_host=\"\\+OK.*\\r\\n\"\r\n" + 
				"to_host=\"LAST NAME .*\\r\\n\"\r\n" + 
				"from_host=\"\\+OK.*\\r\\n\"\r\n" + 
				"to_host=\"FIRST NAME.*\\r\\n\"\r\n" + 
				"from_host=\"\\+OK.*\\r\\n\"\r\n" + 
				"to_host=\"TELE NUM .*\\r\\n\"\r\n" + 
				"from_host=\"\\+OK.*\\r\\n\"\r\n" + 
				"to_host=\"ADDRESS.*\\r\\n\"\r\n" + 
				"from_host=\"\\+OK.*\\r\\n\"\r\n" + 
				"to_host=\"EMAIL.*\\r\\n\"\r\n" + 
				"from_host=\"\\+OK.*\\r\\n\"\r\n" + 
				"to_host=\"OCCUPATION.*\\r\\n\"\r\n" + 
				"from_host=\"\\+OK.*\\r\\n\"";

		r5 = "host=192.168.0.1\r\n" + 
				"\r\n" + 
				"name=test5\r\n" + 
				"type=tcp_stream\r\n" + 
				"host_port=any\r\n" + 
				"attacker_port=any\r\n" + 
				"attacker=any\r\n" + 
				"to_host=\"\\xeb\\x1b\\x5e\\xb8\\x04\\x00\\x00\\x00\\xbb\\x01\\x00\\x00\\x00\\x89\\xf1\\xba\\x18\\x00\\x00\\x00\\xcd\\x80\\x31\\xdb\\x89\\xd8\\x40\\xcd\\x80\\xe8\\xe0\\xff\\xff\\xffNow I pwn your computer\\n\"";

		r6 = "host=192.168.0.1\r\n" + 
				"\r\n" + 
				"name=Blame Attack 3\r\n" + 
				"type=tcp_stream\r\n" + 
				"host_port=5551\r\n" + 
				"attacker_port=any\r\n" + 
				"attacker=any\r\n" + 
				"to_host=\"execute( .* )\"";

		r7 = "host=192.168.0.1\r\n" + 
				"\r\n" + 
				"name=test7\r\n" + 
				"type=tcp_stream\r\n" + 
				"host_port=any\r\n" + 
				"attacker_port=any\r\n" + 
				"attacker=any\r\n" + 
				"to_host=\"<ul>\\n" + 
				"  <li>15% &nbsp; Midterm 1 - date tentatively Feb. 10th </li>\\n" + 
				"  <li>15% &nbsp; Midterm 2 - date March 31st </li>\\n" + 
				"  <li>25% &nbsp; Final exam - date to be determined </li>\\n" + 
				"  <li>20% &nbsp; Two individual projects </li>\\n" + 
				"  <li>20% &nbsp; Group project </li>\\n" + 
				"  <li>05% &nbsp; Course participation </li>\\n" + 
				"</ul>\"";

		r8 = "host=192.168.0.1\r\n" + 
		"\r\n";
		PrintWriter printWriter;
		for (int i = 1; i <= 8; i ++){
			try {
				printWriter = new PrintWriter(new FileOutputStream("r"+i), true);
				switch (i){
				case 1: printWriter.println(r1); break;
				case 2: printWriter.println(r2); break;
				case 3: printWriter.println(r3); break;
				case 4: printWriter.println(r4); break;
				case 5: printWriter.println(r5); break;
				case 6: printWriter.println(r6); break;
				case 7: printWriter.println(r7); break;
				case 8: printWriter.println(r8); break;
				}
				printWriter.flush( );
				printWriter.close();
				switch (i){
				case 1: f1 = new File("r1"); rp1 = new RuleParser(f1);break;
				case 2: f2 = new File("r2"); rp2 = new RuleParser(f2);break;
				case 3: f3 = new File("r3"); rp3 = new RuleParser(f3);break;
				case 4: f4 = new File("r4"); rp4 = new RuleParser(f4);break;
				case 5: f5 = new File("r5"); rp5 = new RuleParser(f5);break;
				case 6: f6 = new File("r6"); rp6 = new RuleParser(f6);break;
				case 7: f7 = new File("r7"); rp7 = new RuleParser(f7);break;
				case 8: f8 = new File("r8"); rp8 = new RuleParser(f8);break;
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}
	}


	@Test
	public void testFlags(){
		

	}


}
